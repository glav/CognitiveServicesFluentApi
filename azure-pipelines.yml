# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: Build_Package
  jobs:
  - job: BuildAndPackage
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NuGetToolInstaller@0
      displayName: 'Use NuGet 4.3.0'

    - task: DotNetCoreInstaller@0
      displayName: 'Use .NET Core sdk 2.1.3'
      inputs:
        version: 2.1.3

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        noCache: true
      condition: succeeded()

    # - task: SonarQubePrepare@4
    #   displayName: 'Prepare analysis on SonarQube'
    #   inputs:
    #     SonarQube: 'Public Hosted Sonarqube'
    #     projectKey: CognitiveFluentApi
    #     projectName: 'Azure Cognitive Services Fluent API'
    #     projectVersion: 0.8
    #     extraProperties: |
    #       # Additional properties that will be passed to the scanner, 
    #       # Put one key=value per line, example:
    #       # sonar.exclusions=**/*.bin
    #       sonar.organization=glav-github
    #       sonar.cs.vscoveragexml.reportsPaths=$(Agent.TempDirectory)/**/*.coveragexml
    #   condition: succeeded()

    - task: VSBuild@1
      displayName: 'Build solution **\*.sln'
      inputs:
        solution: '**\*.sln'
        vsVersion: 15.0
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
      condition: succeeded()

    - task: qetza.replacetokens.replacetokens-task.replacetokens@2
      displayName: 'Replace tokens in **\*.json'
      inputs:
        targetFiles: '**\*.json'
      condition: succeeded()

    - task: DotNetCoreCLI@2
      displayName: 'Unit Tests'
      inputs:
        command: test
        projects: 'Tests\Glav.CognitiveServices.UnitTests\Glav.CognitiveServices.UnitTests.csproj'
        arguments: '--configuration $(BuildConfiguration) --no-build --collect "Code Coverage"'
        feedsToUse: config
      condition: succeeded()

    - task: DotNetCoreCLI@2
      displayName: 'Integration Tests'
      inputs:
        command: test
        projects: 'Tests\Glav.CognitiveServices.IntegrationTests\Glav.CognitiveServices.IntegrationTests.csproj'
        arguments: '--configuration $(BuildConfiguration) --no-build --collect "Code Coverage"'
        feedsToUse: config
      condition: succeeded()

    - task: AzurePowerShell@4
      inputs:
        azureSubscription: 'Azure Free Trial (d6876356-8975-4384-bbec-4be79f7fe030)'
        ScriptType: 'InlineScript'
        Inline: |
          $ver = (Get-ChildItem $env:USERPROFILE\.nuget\packages\Microsoft.CodeCoverage | Select-Object -Property Name | Sort-Object -Descending | Select-Object -First 1).Name
                  
          Get-ChildItem -Recurse -Filter "*.coverage" | % {
          $outfile = "$([System.IO.Path]::GetFileNameWithoutExtension($_.FullName)).coveragexml"
          $output = [System.IO.Path]::Combine([System.IO.Path]::GetDirectoryName($_.FullName), $outfile)
          "Analyse [$($_.FullName)] with output [$output]..."
          . $env:USERPROFILE\.nuget\packages\microsoft.codecoverage\$ver\build\netstandard1.0\CodeCoverage\CodeCoverage.exe analyze /output:$output $_.FullName
          }
          "Done"
        azurePowerShellVersion: 'LatestVersion'
      displayName: 'Convert Code coverage binary to XML'
      condition: succeeded()

    # - task: SonarSource.sonarqube.6D01813A-9589-4B15-8491-8164AEB38055.SonarQubeAnalyze@4
    #   displayName: 'Run Code Analysis'
    #   condition: succeeded()

    # - task: SonarSource.sonarqube.291ed61f-1ee4-45d3-b1b0-bf822d9095ef.SonarQubePublish@4
    #   displayName: 'Publish Quality Gate Result'
    #   condition: succeeded()

    - task: PublishSymbols@1
      displayName: 'Publish symbols path: '
      inputs:
        SearchPattern: '**\bin\**\*.pdb'
      continueOnError: true

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**\bin\$(BuildConfiguration)\**'
        TargetFolder: '$(build.artifactstagingdirectory)'
      condition: succeeded()

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact: drop'
      inputs:
        targetPath: '$(build.artifactstagingdirectory)'
        artifact: 'drop'
      condition: succeeded()
        
    - task: solidify-labs.chucknorris-build-enhancer.chuck-norris-task.ChuckNorrisTask@0
      displayName: 'Chuck Norris Quotes'

- stage: Deployment
  jobs:
  - deployment: DeployJob
    displayName: DeployPackageToFeed
    pool:
      vmImage: 'windows-latest'
    environment: Feed
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzurePowerShell@4
            inputs:
              azureSubscription: 'Azure Free Trial (d6876356-8975-4384-bbec-4be79f7fe030)'
              ScriptType: 'InlineScript'
              Inline: 'Write-Output "Deploy stage WIP"'
              azurePowerShellVersion: 'LatestVersion'  
            condition: succeeded()
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              targetPath: '$(Pipeline.Workspace)'
              artifactName: 'drop'
          - task: NuGetCommand@2
            inputs:  
              command: 'push'
              feedsToUse: 'select'
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
              nuGetFeedType: 'internal'
              publishVstsFeed: 'CognitiveServicesFluentApiInternal'
              versioningScheme: 'off'
              allowPackageConflicts: true            
            condition: succeeded()
    
